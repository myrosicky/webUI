package org.ll.context;
import java.io.IOException;
@Configuration@EnableWebSecurity@EnableOAuth2Ssopublic class WebSecurityContext extends WebSecurityConfigurerAdapter {
    private static final Logger log = LoggerFactory.getLogger(WebSecurityContext.class);
    @Autowired    private OAuth2ClientContext oauth2ClientContext;
    @Autowired    private AuthorizationCodeResourceDetails client;
    @Autowired    private ResourceServerProperties resource;        @Autowired(required=false)    @Lazy    private CallAPIService callAPIService;
    @Override    protected void configure(HttpSecurity http) throws Exception {
//        UserInfoTokenServices tokenServices = new UserInfoTokenServices(resource.getUserInfoUri(), client.getClientId());//        tokenServices.setRestTemplate(restTemplate());//        //        CompositeFilter compositeFilter = new CompositeFilter();////        OAuth2ClientAuthenticationProcessingFilter filter = new OAuth2ClientAuthenticationProcessingFilter("/login");////        filter.setRestTemplate(restTemplate());////        filter.setTokenServices(tokenServices);//        //        List<Filter> filters = new ArrayList<>();////        filters.add(filter);//        compositeFilter.setFilters(filters);                http            .authorizeRequests()            .antMatchers("/login**", "/webjars/**", "/css/**", "/js/**").permitAll()            .anyRequest().hasRole("USER")        .and()            .exceptionHandling().authenticationEntryPoint(new LoginUrlAuthenticationEntryPoint("/login"))        .and()            .logout()            .logoutSuccessHandler(new LogoutSuccessHandler(){                @Override                public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication)                    throws IOException, ServletException {                    callAPIService.deleteToken();                    HttpSession httpSession = request.getSession(false);                    log.debug("httpSession:" + httpSession);                    for(Cookie cookie : request.getCookies()){                        cookie.setValue(null);                        cookie.setMaxAge(0);                        response.addCookie(cookie);                    }                    if(httpSession != null){                        log.debug("httpSession.removeAttribute");                        httpSession.removeAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);                        httpSession.invalidate();                    }                }                            })//            .addLogoutHandler(new LogoutHandler(){//                @Override//                public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) {//                    callAPIService.deleteToken();//                    HttpSession httpSession = request.getSession(false);//                    log.debug("httpSession:" + httpSession);//                    for(Cookie cookie : request.getCookies()){//                        cookie.setValue(null);//                        cookie.setMaxAge(0);//                        response.addCookie(cookie);//                    }//                    if(httpSession != null){//                        log.debug("httpSession.removeAttribute");//                        httpSession.removeAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);//                        httpSession.invalidate();//                    }//                }//            })            .permitAll()        .and()            .csrf()            .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())            .ignoringAntMatchers("/logout")        .and()            .headers().xssProtection()        .and()            .frameOptions().sameOrigin()            ;    }
    @Override     public void configure(WebSecurity web) throws Exception {          web.ignoring().antMatchers("/resources/**", "/static/**", "/webjars/**", "/images/**", "/oauth/uncache_approvals", "/oauth/cache_approvals");     } 
    @Bean    OAuth2RestOperations restTemplate() {//        return new OAuth2RestTemplate(client, oauth2ClientContext);        return new MyOAuth2RestTemplate(client, oauth2ClientContext);    }        @Bean    public TokenStore tokenStore() {//        return new JwtTokenStore(new JwtAccessTokenConverter());        return new InMemoryTokenStore();    }    }
